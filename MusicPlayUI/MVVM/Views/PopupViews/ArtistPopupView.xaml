<UserControl x:Class="MusicPlayUI.MVVM.Views.PopupViews.ArtistPopupView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:lang="clr-namespace:MusicPlay.Language;assembly=MusicPlay.Language"
             xmlns:local="clr-namespace:MusicPlayUI.MVVM.Views" 
             xmlns:viewmodels="clr-namespace:MusicPlayUI.MVVM.ViewModels.PopupViewModels" 
             xmlns:popup="clr-namespace:MusicPlayUI.MVVM.Views.PopupViews"
             xmlns:textbtn="clr-namespace:TextBtn;assembly=TextBtn"
             d:DataContext="{d:DesignInstance Type=viewmodels:ArtistPopupViewModel}"
             mc:Ignorable="d" 
             x:Name="RootView"
             d:DesignHeight="450" d:DesignWidth="800">
    <Border Background="{DynamicResource Background}"
                        Padding="0,5,0,0"
            MinWidth="200"
            MaxWidth="350"
            CornerRadius="4"
            BorderThickness="1"
            BorderBrush="{DynamicResource Outline}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" MinHeight="70"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!-- Artist Info -->
            <Grid Grid.Column="1"
                        Margin="5,0,5,5">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <!-- Cover -->
                <Border CornerRadius="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SizeConverter}, ConverterParameter=2}"
                        VerticalAlignment="Stretch"
                        Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}">
                    <Border.Background>
                        <ImageBrush ImageSource="{Binding Artist.Cover, Converter={StaticResource TNullImageConverter}, ConverterParameter=1}"
                                            Stretch="UniformToFill"/>
                    </Border.Background>
                </Border>

                <TextBlock Text="{Binding Artist.Name}"
                           Grid.Column="1"
                           Margin="10,4"
                             Style="{DynamicResource SStyle}"
                               MaxHeight="50"/>
            </Grid>

            <Grid Grid.Row="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="40"/>
                    <RowDefinition Height="40"/>
                    <RowDefinition Height="40"/>
                    <RowDefinition Height="40"/>
                </Grid.RowDefinitions>

                <textbtn:TextButton Text="{x:Static lang:Resources.Play_Next}"
                                   Style="{DynamicResource PopupBtn}"
                                    Command="{Binding PlayNextCommand}"/>

                <textbtn:TextButton Text="{x:Static lang:Resources.Add_To_Queue}"
                                    Grid.Row="1"
                                   Style="{DynamicResource PopupBtn}"
                                    Command="{Binding AddToQueueCommand}"/>

                <textbtn:TextButton Text="{x:Static lang:Resources.Add_To_Playlist}"
                                    Grid.Row="2"
                                    x:Name="AddToPlaylistBorder"
                                    Style="{DynamicResource PopupBtn}"/>

                <textbtn:TextButton Text="{x:Static lang:Resources.Change_Cover}"
                                    Grid.Row="3"
                                    CornerRadius="0,0,4,4"
                                   Style="{DynamicResource PopupBtn}"
                                    Command="{Binding ChangeCoverCommand}"/>
            </Grid>
            <!-- Playlists Popup -->
            <Popup AllowsTransparency="True"
                   x:Name="playlistsPopup"
                   PopupAnimation="None"
                   StaysOpen="True">
                <Popup.Style>
                    <Style TargetType="Popup">
                        <Setter Property="PlacementTarget" Value="{Binding ElementName=AddToPlaylistBorder}"/>
                        <Setter Property="Placement" Value="Right"/>
                        <Setter Property="VerticalAlignment" Value="Top"/>
                        <Setter Property="VerticalOffset" Value="0"/>
                        <Setter Property="IsOpen" Value="False"/>
                        <Setter Property="Child">
                            <Setter.Value>
                                <popup:AddToPlaylistPopup DataContext="{Binding DataContext, ElementName=RootView}"/>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="IsOpen" Value="True"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding IsMouseOver, ElementName=AddToPlaylistBorder}" Value="true">
                                <Setter Property="IsOpen" Value="True"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Popup.Style>
            </Popup>
        </Grid>
    </Border>
</UserControl>
