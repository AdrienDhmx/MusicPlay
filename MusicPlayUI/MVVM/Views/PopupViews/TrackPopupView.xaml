<UserControl x:Class="MusicPlayUI.MVVM.Views.PopupViews.TrackPopupView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:viewmodels="clr-namespace:MusicPlayUI.MVVM.ViewModels.PopupViewModels"
             xmlns:lang="clr-namespace:MusicPlay.Language;assembly=MusicPlay.Language"
             xmlns:popup="clr-namespace:MusicPlayUI.MVVM.Views.PopupViews"
             xmlns:textbtn="clr-namespace:TextBtn;assembly=TextBtn"
             d:DataContext="{d:DesignInstance Type=viewmodels:TrackPopupViewModel}"
             xmlns:listview="clr-namespace:MusicPlayUI.MVVM.Views.ListViews"
             mc:Ignorable="d"
             x:Name="RootView"
             d:DesignHeight="450" d:DesignWidth="800">
    <Border Background="{DynamicResource Background}"
            Padding="0,5,0,0"
            MinWidth="200"
            MaxWidth="400"
            CornerRadius="4"
            BorderThickness="1"
            BorderBrush="{DynamicResource Outline}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" MinHeight="70"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!-- Track Info Card -->
            <Grid Grid.Column="1"
                  Margin="5,0,5,5">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Border CornerRadius="5"
                        Visibility="{Binding QueueService.AreCoversEnabled, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                        VerticalAlignment="Stretch"
                        Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}">
                    <Border.Background>
                        <ImageBrush ImageSource="{Binding SelectedTrack.Cover, Converter={StaticResource ONullImageConverter}}"
                                    Stretch="UniformToFill">
                        </ImageBrush>
                    </Border.Background>
                </Border>

                <StackPanel Orientation="Vertical"
                            Grid.Column="1"
                            VerticalAlignment="Top"
                            MaxWidth="210"
                            Margin="10,4">
                    <TextBlock Text="{Binding SelectedTrack.Title}"
                               Style="{DynamicResource SStyle}"
                               MaxHeight="50"
                               MaxWidth="400"/>

                    <listview:TrackArtistsListView Artists="{Binding SelectedTrack.Artists}"
                                                   FontSize="14"
                                                   Foreground="{DynamicResource OnBackground}"
                                                   Command="{Binding NavigateToArtistCommand}"/>

                </StackPanel>
            </Grid>

            <Grid Grid.Row="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="40"/>
                    <RowDefinition Height="40"/>
                    <RowDefinition Height="40"/>
                    <RowDefinition Height="40"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="40"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="40"/>
                </Grid.RowDefinitions>

                <textbtn:TextButton Text="{x:Static lang:Resources.Play_Next}"
                                   Style="{DynamicResource PopupBtn}"
                                    Command="{Binding PlayNextCommand}"/>

                <textbtn:TextButton Text="{x:Static lang:Resources.Add_To_Queue}"
                                    Grid.Row="1"
                                   Style="{DynamicResource PopupBtn}"
                                    Command="{Binding AddToQueueCommand}"/>

                <textbtn:TextButton Text="{x:Static lang:Resources.Add_To_Playlist}"
                                    Grid.Row="2"
                                    x:Name="AddToPlaylistBorder"
                                    Style="{DynamicResource PopupBtn}"/>

                <textbtn:TextButton Text="Add to Tag"
                                    Grid.Row="3"
                                    x:Name="AddToTagBorder"
                                    Style="{DynamicResource PopupBtn}"/>

                <textbtn:TextButton Text="Remove from Tag"
                                    Grid.Row="4"
                                        Height="40"
                                        Visibility="{Binding CanRemoveFromGenre, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter=2}"
                                    Command="{Binding RemoveTagCommand}"
                                    CommandParameter="{Binding SelectedTrack}"
                                    x:Name="RemomveFromGenreBorder"
                                    Style="{DynamicResource PopupBtn}"/>

                <textbtn:TextButton Text="Start radio"
                                    Grid.Row="5"
                                    CornerRadius="0,0,4,4"
                                   Style="{DynamicResource PopupBtn}"
                                    Command="{Binding StartRadioCommand}"/>

                <textbtn:TextButton Text="{x:Static lang:Resources.Remove_From_Playlist}"
                                    Grid.Row="6"
                                   Style="{DynamicResource PopupBtn}"
                                    Height="40"
                                    x:Name="RemoveFromPlaylistBorder"
                                    Visibility="{Binding RemoveFromPlaylistVisibility, Converter={StaticResource BoolToVisibilityConverter}}"
                                    Command="{Binding RemoveFromPlaylistCommand}"/>

                <textbtn:TextButton Text="{x:Static lang:Resources.Edit}"
                                    Grid.Row="7"
                                    CornerRadius="0,0,4,4"
                                   Style="{DynamicResource PopupBtn}"
                                    Command="{Binding ChangeArtworkCommand}"/>
            </Grid>

            <!-- Playlists Popup -->
            <Popup AllowsTransparency="True"
                   x:Name="playlistsPopup"
                   PopupAnimation="None"
                   StaysOpen="True">
                <Popup.Style>
                    <Style TargetType="Popup">
                        <Setter Property="PlacementTarget" Value="{Binding ElementName=AddToPlaylistBorder}"/>
                        <Setter Property="Placement" Value="Right"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="VerticalOffset" Value="0"/>
                        <Setter Property="IsOpen" Value="{Binding DataContext.IsPlaylistPopupOpen, ElementName=RootView, UpdateSourceTrigger=PropertyChanged}"/>
                        <Setter Property="Child">
                            <Setter.Value>
                                <popup:AddToPlaylistPopup DataContext="{Binding DataContext, ElementName=RootView}"/>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="IsOpen" Value="True"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding IsMouseOver, ElementName=AddToPlaylistBorder}" Value="true">
                                <Setter Property="IsOpen" Value="True"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Popup.Style>
            </Popup>

            <!-- Tag Popup -->
            <Popup AllowsTransparency="True"
                   x:Name="tagsPopup"
                   PopupAnimation="None"
                   StaysOpen="True">
                <Popup.Style>
                    <Style TargetType="Popup">
                        <Setter Property="PlacementTarget" Value="{Binding ElementName=AddToTagBorder}"/>
                        <Setter Property="Placement" Value="Right"/>
                        <Setter Property="VerticalOffset" Value="0"/>
                        <Setter Property="IsOpen" Value="False"/>
                        <Setter Property="Child">
                            <Setter.Value>
                                <popup:AddToTagPopup DataContext="{Binding DataContext, ElementName=RootView}"/>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="IsOpen" Value="True"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding IsMouseOver, ElementName=AddToTagBorder}" Value="true">
                                <Setter Property="IsOpen" Value="True"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Popup.Style>
            </Popup>
        </Grid>
    </Border>
</UserControl>
