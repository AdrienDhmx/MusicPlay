<UserControl x:Class="MusicPlayUI.MVVM.Views.LyricsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MusicPlayUI.MVVM.Views"
             xmlns:card="clr-namespace:CustomCardControl;assembly=CustomCardControl"
             xmlns:customButton="clr-namespace:IconButton;assembly=IconButton"
             xmlns:viewmodels="clr-namespace:MusicPlayUI.MVVM.ViewModels" 
             xmlns:stepper="clr-namespace:Stepper;assembly=Stepper"
             xmlns:textbtn="clr-namespace:TextBtn;assembly=TextBtn"
             xmlns:lang="clr-namespace:MusicPlay.Language;assembly=MusicPlay.Language"
             xmlns:ds="clr-namespace:DynamicScrollViewer;assembly=DynamicScrollViewer"
             d:DataContext="{d:DesignInstance Type=viewmodels:LyricsViewModel}"
             mc:Ignorable="d" 
             x:Name="RootLyricsView"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.InputBindings>
        <KeyBinding Key="S" Modifiers="Ctrl" Command="{Binding SaveCommand}"/>
    </UserControl.InputBindings>
    <Border>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>

            <Border Background="{DynamicResource ScdWhiteTransparent}"
                        Height="50"
                         Margin="0,0,10,0"
                        HorizontalAlignment="Stretch"
                        CornerRadius="0,0,12,12">
                <StackPanel Margin="5,0"
                            Grid.Row="1"
                            Panel.ZIndex="3"
                            Orientation="Horizontal"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center">

                    <Border Visibility="Collapsed"
                            Background="{DynamicResource PrimaryHover}"
                            x:Name="BorderBackground"/>

                    <stepper:Stepper Width="auto"
                                     Height="30"
                                     Background="Transparent"
                                     BtnBackgroundColor="Transparent"
                                     CornerRadius="4"
                                     BorderThickness="0.5"
                                     Panel.ZIndex="10"
                                     Padding="2,0"
                                     BorderBrush="{DynamicResource WhiteForeground}"
                                     Foreground="{DynamicResource WhiteForeground}"
                                     CaretBrush="{DynamicResource WhiteForeground}"
                                     MouseOverBtnColor="{DynamicResource ScdWhiteTransparent}"
                                     IsReadOnly="False"
                                     IsReadOnlyCaretVisible="False"
                                     FontSize="18"
                                     Placeholder="10 - 50"
                                     Min="10"
                                     Max="50"
                                     VerticalContentAlignment="Center"
                                     HorizontalContentAlignment="Center"
                                     StepValue="1"
                                     Value="{Binding FontSize, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                     Unit="px"
                                     Margin="0,0,5,0">
                    </stepper:Stepper>

                    <!-- auto foreground Button -->
                    <customButton:IconButton Icon="{DynamicResource PaletteIcon}"
                                             Margin="0,0,10,0"
                                             FillColor="{DynamicResource WhiteForeground}"
                                             Command="{Binding ToggleAutoForegroundCommand}">
                        <customButton:IconButton.Style>
                            <Style TargetType="customButton:IconButton"
                                   BasedOn="{StaticResource NowPlayingIconButton}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.IsAutoForeground, ElementName=RootLyricsView}"
                                                 Value="true">
                                        <Setter Property="BorderBrush" Value="{DynamicResource WhiteTransparent}"/>
                                        <Setter Property="Background" Value="{DynamicResource ScdWhiteTransparent}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </customButton:IconButton.Style>
                    </customButton:IconButton>

                    <!-- Save Button -->
                    <customButton:IconButton IsEnabled="{Binding CanSave}"
                                             Icon="{DynamicResource SaveIcon}"
                                             FillColor="{DynamicResource WhiteForeground}"
                                             Command="{Binding SaveCommand}">
                        <customButton:IconButton.Style>
                            <Style TargetType="customButton:IconButton"
                                   BasedOn="{StaticResource NowPlayingIconButton}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.IsSaved, ElementName=RootLyricsView, UpdateSourceTrigger=PropertyChanged}"
                                                 Value="true">
                                        <Setter Property="BorderBrush" Value="{DynamicResource WhiteTransparent}"/>
                                        <Setter Property="Background" Value="{DynamicResource ScdWhiteTransparent}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding DataContext.CanSave, ElementName=RootLyricsView, UpdateSourceTrigger=PropertyChanged}"
                                                 Value="false">
                                        <Setter Property="Opacity" Value="0.5"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </customButton:IconButton.Style>
                    </customButton:IconButton>

                    <!-- Edit Button -->
                    <customButton:IconButton Icon="{DynamicResource Edit}"
                                             FillColor="{DynamicResource WhiteForeground}"
                                             Command="{Binding EnterLeaveEditModeCommand}">
                        <customButton:IconButton.Style>
                            <Style TargetType="customButton:IconButton"
                                   BasedOn="{StaticResource NowPlayingIconButton}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.IsEditMode, ElementName=RootLyricsView}"
                                                 Value="true">
                                        <Setter Property="BorderBrush" Value="{DynamicResource WhiteTransparent}"/>
                                        <Setter Property="Background" Value="{DynamicResource ScdWhiteTransparent}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </customButton:IconButton.Style>
                    </customButton:IconButton>

                    <!-- Timed Lyrics Button -->
                    <customButton:IconButton Icon="{DynamicResource TimedLyrics}"
                                             FillColor="{DynamicResource WhiteForeground}"
                                             Command="{Binding EnterLeaveTimedLyricsCommand}">
                        <customButton:IconButton.Style>
                            <Style TargetType="customButton:IconButton"
                                   BasedOn="{StaticResource NowPlayingIconButton}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.IsTimed, ElementName=RootLyricsView}"
                                                 Value="true">
                                        <Setter Property="BorderBrush" Value="{DynamicResource WhiteTransparent}"/>
                                        <Setter Property="Background" Value="{DynamicResource ScdWhiteTransparent}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </customButton:IconButton.Style>
                    </customButton:IconButton>

                    <!-- Copy -->
                    <customButton:IconButton Style="{DynamicResource NowPlayingIconButton}"
                                              Margin="10,0,0,0"
                                             Icon="{DynamicResource Copy}"
                                             IsEnabled="{Binding CanCopy}"
                                              FillColor="{DynamicResource WhiteForeground}"
                                             Command="{Binding CopyLyricsCommand}"/>
                    <!-- Paste -->
                    <customButton:IconButton Style="{DynamicResource NowPlayingIconButton}"
                                              Margin="0,0,5,0"
                                             Icon="{DynamicResource Paste}"
                                              FillColor="{DynamicResource WhiteForeground}"
                                             Command="{Binding PasteLyricsCommand}"/>

                    <!-- URL link Button -->
                    <card:CustomCardControl Icon="{DynamicResource LinkIcon}"
                                            FillColor="{DynamicResource WhiteForeground}"
                                            Margin="5,0, 0, 0"
                                            Width="auto"
                                            Height="34"
                                            IconHeight="12"
                                            IconWidth="22"
                                            IconMargin="5,0"
                                            IconStretch="Fill"
                                            FontSize="16"
                                            FontWeight="DemiBold"
                                            TextAlignment="Center"
                                            HorizontalAlignment="Center"
                                            Visibility="{Binding IsURLValid, Converter={StaticResource BoolToVisibilityConverter}}"
                                            CardHeader="{Binding WebsiteSource}"
                                             Foreground="{DynamicResource WhiteForeground}"
                                            BorderBrush="{DynamicResource WhiteTransparent}"
                                            BorderThickness="1"
                                            CornerRadius="4"
                                            CardDescriptionVisibility="Collapsed"
                                            VerticalAlignment="Center"
                                            VerticalContentAlignment="Center"
                                            Command="{Binding OpenLyricsWebPageCommand}">
                        <card:CustomCardControl.Style>
                            <Style TargetType="card:CustomCardControl">
                                <Setter Property="Background" Value="Transparent"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource ScdWhiteTransparent}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </card:CustomCardControl.Style>
                    </card:CustomCardControl>

                    <!-- Retry Button -->
                    <customButton:IconButton Style="{DynamicResource NowPlayingIconButton}"
                                             Icon="{DynamicResource Refresh}"
                                             FillColor="{DynamicResource WhiteForeground}"
                                             Command="{Binding GetLyricsCommand}"/>
                </StackPanel>
            </Border>

            <!-- Lyrics -->
            <ds:DynamicScrollViewer IsInertiaEnabled="True"
                          x:Name="LyricsScroll"
                          VerticalScrollBarVisibility="Hidden"
                          PreviewMouseWheel="LyricsScroll_PreviewMouseWheel">
                <ds:DynamicScrollViewer.Style>
                    <Style TargetType="ds:DynamicScrollViewer">
                        <Setter Property="Grid.Row" Value="1"/>
                        <Setter Property="Margin" Value="10,0"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding DataContext.VisualizerParameterService.TextAlignment, Mode=OneWay, ElementName=RootLyricsView}" Value="left">
                                <Setter Property="Margin" Value="40,0, 10, 0"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ds:DynamicScrollViewer.Style>
                <ds:DynamicScrollViewer.OpacityMask>
                    <RadialGradientBrush Center="0.5, 0.5"
                                              RadiusX="2">
                        <GradientStop Offset="0" Color="#000000"/>
                        <GradientStop Offset="0.65" Color="#000000"/>
                        <GradientStop Offset="0.8" Color="#aa000000"/>
                        <GradientStop Offset="0.9" Color="#60000000"/>
                        <GradientStop Offset="1" Color="#20000000"/>
                    </RadialGradientBrush>
                </ds:DynamicScrollViewer.OpacityMask>

                <Grid x:Name="LyricsGrid">
                    <Grid.RowDefinitions >
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                    </Grid.RowDefinitions>

                    <!-- "Normal" Lyrics -->
                    <TextBox Grid.Row="1"
                         x:Name="LyricsTextBox"
                             MinHeight="400"
                         Visibility="{Binding IsTimed, Converter={StaticResource BoolToVisibilityConverterInverted}, UpdateSourceTrigger=PropertyChanged}"
                         HorizontalAlignment="Stretch"
                         VerticalAlignment="Stretch"
                          AcceptsReturn="True"
                         AcceptsTab="True"
                         TextWrapping="Wrap"
                         TextAlignment="{Binding VisualizerParameterService.TextAlignment, Mode=OneWay}"
                             Background="Transparent"
                             BorderThickness="0"
                             IsReadOnlyCaretVisible="False"
                         IsReadOnly="{Binding IsEditMode, Converter={StaticResource InverseBoolConverter}}"
                         IsHitTestVisible="{Binding IsEditMode}"
                         CaretBrush="{DynamicResource WhiteForeground}"
                         Text="{Binding Lyrics, UpdateSourceTrigger=PropertyChanged}"
                         FontSize="{Binding FontSize}"
                             FontWeight="Normal"
                          PreviewMouseWheel="LyricsScroll_PreviewMouseWheel">
                        <TextBox.Style>
                            <Style TargetType="TextBox" BasedOn="{StaticResource Basestyle}">
                                <Setter Property="Foreground" Value="{Binding DataContext.VisualizerParameterService.EmphasizedObjectColor, ElementName=RootLyricsView}"/>

                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.IsAutoForeground, ElementName=RootLyricsView}" Value="false">
                                        <Setter Property="Foreground" Value="{DynamicResource WhiteForeground}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>

                    <!-- Timed Lyrics -->
                    <Border Visibility="{Binding IsTimed, Converter={StaticResource BoolToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}"
                            Grid.Row="1">
                        
                        <ListView x:Name="TimedLyricsListView"
                                ItemsSource="{Binding TimedLyrics}"
                                SelectedItem="{Binding PlayingTimedLyrics}"
                                SelectionChanged="TimedLyricsListView_SelectionChanged"
                                SelectionMode="Single"
                                Style="{DynamicResource LyricsListView}"
                                VerticalAlignment="Stretch"
                                    ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                HorizontalAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                HorizontalContentAlignment="Stretch"
                                MinHeight="500"
                                MinWidth="500">
                            <ListView.ItemContainerStyle>
                                <Style TargetType="ListViewItem">
                                    <Setter Property="Background" Value="Transparent" />
                                    <Setter Property="SnapsToDevicePixels" Value="True" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="ListViewItem">
                                                <Border
                                                    x:Name="Border"
                                                    Margin="0"
                                                    Padding="4"
                                                    Background="Transparent"
                                                    BorderThickness="0"
                                                    CornerRadius="5"
                                                    BorderBrush="Transparent">
                                                    <ContentPresenter />
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListView.ItemContainerStyle>
                            <ListView.ItemTemplate>
                                <DataTemplate>
                                    <Grid Height="auto"
                                            Margin="2,15">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>

                                        <StackPanel Orientation="Horizontal"
                                                Width="200"
                                                    HorizontalAlignment="Left"
                                                Visibility="{Binding DataContext.IsTimedEditMode, ElementName=RootLyricsView, Converter={StaticResource BoolToVisibilityConverter}}">
                                            <customButton:IconButton Width="50"
                                                                        Height="50"
                                                                        CornerRadius="10"
                                                                        BorderThickness="1"
                                                                        IconMargin="8"
                                                                        Icon="{DynamicResource Timer}"
                                                                        StrokeColor="Transparent"
                                                                        IconStretch="Uniform"
                                                                        FillColor="{DynamicResource WhiteForeground}"
                                                                        HorizontalContentAlignment="Center"
                                                                        VerticalContentAlignment="Center"
                                                                        Command="{Binding DataContext.SetLengthCommand, ElementName=RootLyricsView }"
                                                                        CommandParameter="{Binding .}"
                                                                        MouseOverBackground="{DynamicResource PrimaryHover}"
                                                                        Style="{DynamicResource BaseIconButton}"/>

                                            <TextBox Text="{Binding Time, UpdateSourceTrigger=PropertyChanged}"
                                                        VerticalAlignment="Center"
                                                        Margin="20,0,10,0"
                                                        Foreground="{DynamicResource WhiteForeground}"
                                                    FontSize="18"
                                                    Width="60"/>

                                        </StackPanel>

                                        <TextBox IsReadOnly="{Binding DataContext.IsTimedEditMode, ElementName=RootLyricsView, Converter={StaticResource InverseBoolConverter}}"
                                                    IsHitTestVisible="{Binding  DataContext.IsTimedEditMode, ElementName=RootLyricsView}"
                                                Text="{Binding Lyrics}"
                                                    Grid.Column="1"
                                                HorizontalAlignment="Stretch"
                                                    Background="Transparent"
                                                    BorderThickness="0"
                                                    TextWrapping="Wrap"
                                                HorizontalContentAlignment="Stretch"
                                                TextAlignment="{Binding DataContext.VisualizerParameterService.TextAlignment, ElementName=RootLyricsView, Mode=OneWay}"
                                                    Padding="5,0">
                                            <TextBox.Style>
                                                <Style TargetType="TextBox">
                                                    <Setter Property="FontSize" Value="{Binding DataContext.FontSize, ElementName=RootLyricsView}"/>
                                                    <Setter Property="FontWeight" Value="Normal"/>
                                                    <Setter Property="Foreground" Value="{Binding DataContext.VisualizerParameterService.EmphasizedObjectColor, ElementName=RootLyricsView}"/>
                                                    <Setter Property="Opacity" Value="0.75"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsPlaying}" Value="true">
                                                            <Setter Property="FontSize" Value="{Binding DataContext.FontSize, ElementName=RootLyricsView, 
                                                                Converter={StaticResource AdditionConverter}, ConverterParameter=2, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}"
                                                                        />
                                                            <Setter Property="FontWeight" Value="Bold"/>
                                                            <Setter Property="Opacity" Value="1"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding DataContext.IsAutoForeground, ElementName=RootLyricsView}" Value="false">
                                                            <Setter Property="Foreground" Value="{DynamicResource WhiteForeground}"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBox.Style>
                                        </TextBox>

                                    </Grid>
                                </DataTemplate>
                            </ListView.ItemTemplate>
                        </ListView>
                    </Border>
                </Grid>
            </ds:DynamicScrollViewer>


            <StackPanel Orientation="Horizontal"
                        HorizontalAlignment="Center"
                        Visibility="{Binding IsTimed, Converter={StaticResource BoolToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}"
                                    Grid.Row="2">
                <textbtn:TextButton Style="{DynamicResource SaveBtn}"
                                    Foreground="{DynamicResource WhiteForeground}"
                                    Command="{Binding SaveTimedLyricsCommand}"
                                    Visibility="{Binding IsTimedEditMode, Converter={StaticResource BoolToVisibilityConverter}}"
                                    Margin="10"/>

                <textbtn:TextButton Style="{DynamicResource DeleteBtn}"
                                     Foreground="{DynamicResource WhiteForeground}"
                                    Command="{Binding DeleteTimedLyricsCommand}"
                                    Visibility="{Binding IsTimedEditMode, Converter={StaticResource BoolToVisibilityConverter}}"
                                    Margin="10"/>
            </StackPanel>
        </Grid>
    </Border>
</UserControl>
