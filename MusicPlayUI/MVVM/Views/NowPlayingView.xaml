<UserControl x:Class="MusicPlayUI.MVVM.Views.NowPlayingView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:viewmodels="clr-namespace:MusicPlayUI.MVVM.ViewModels" 
             xmlns:mathconv="clr-namespace:MusicPlayUI.Converters"
             d:DataContext="{d:DesignInstance Type=viewmodels:NowPlayingViewModel}"
             mc:Ignorable="d" 
             xmlns:customButton="clr-namespace:IconButton;assembly=IconButton" 
             xmlns:spectrum="clr-namespace:SpectrumVisualizer;assembly=SpectrumVisualizer"
             xmlns:player="clr-namespace:MusicPlayUI.MVVM.Views.PlayerControlViews"
             xmlns:list="clr-namespace:MusicPlayUI.MVVM.Views.ListViews"
             x:Name="RootView"
             d:DesignHeight="450" d:DesignWidth="800">

    <Border x:Name="RootBorder"
            ClipToBounds="True">
        <Border.Background>
            <ImageBrush ImageSource="{Binding BlurredCover, Converter={StaticResource ONullImageConverter}, ConverterParameter=-1}"/>
        </Border.Background>
        <Border.Style>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="0"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding DataContext.IsFullScreen, ElementName=RootView}" Value="True">
                        <Setter Property="CornerRadius" Value="{DynamicResource PrimaryCornerRadius}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Border.Style>
        <Grid x:Name="RootGrid">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!-- transparent Black to make the background darker -->
            <Border Grid.RowSpan="2"
                    Grid.ColumnSpan="3"
                    VerticalAlignment="Stretch"
                    Background="{DynamicResource BlackTransparent}"
                    Panel.ZIndex="0"
                    IsHitTestVisible="False">
                <Border.Style>
                    <Style TargetType="Border">
                        <Setter Property="CornerRadius" Value="0"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding DataContext.IsFullScreen, ElementName=RootView}" Value="True">
                                <Setter Property="CornerRadius" Value="{DynamicResource PrimaryCornerRadius}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>

            <!-- Sub Menu for views -->
            <Grid Visibility="Visible"
                   Grid.Column="1"
                    x:Name="SettingsGrid"
                    Background="Transparent"
                    Margin="20,0"
                    HorizontalAlignment="Stretch">
                <Grid.RowDefinitions>
                    <RowDefinition Height="6"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>

                <Border Background="{DynamicResource ScdWhiteTransparent}"
                        CornerRadius="0,0,3,3"/>
                <Border Background="{DynamicResource ScdWhiteTransparent}"
                        Grid.Row="1"
                        Height="50"
                            Visibility="{Binding IsMouseOver, ElementName=SettingsGrid, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                        CornerRadius="0,0,0,0">

                </Border>
                <StackPanel Orientation="Horizontal"
                             Grid.Row="1"
                            Visibility="{Binding IsMouseOver, ElementName=SettingsGrid, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center" 
                                Margin="0,0,0,0">

                    <!-- Spectrum Btn -->
                    <customButton:IconButton Icon="{DynamicResource VisualizerIcon}"
                                                FillColor="{DynamicResource WhiteForeground}"
                                                Command="{Binding ShowHideSpectrumCommand}">
                        <customButton:IconButton.InputBindings>
                            <MouseBinding Gesture="RightClick" Command="{Binding OpenVisualizerSettingCommand}"/>
                        </customButton:IconButton.InputBindings>
                        <customButton:IconButton.Style>
                            <Style TargetType="customButton:IconButton"
                                   BasedOn="{StaticResource NowPlayingIconButton}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.SpectrumVisibility, ElementName=RootView}"
                                                         Value="true">
                                        <Setter Property="BorderBrush" Value="{DynamicResource WhiteTransparent}"/>
                                        <Setter Property="Background" Value="{DynamicResource ScdWhiteTransparent}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </customButton:IconButton.Style>
                    </customButton:IconButton>

                    <Border Width="1"
                            Margin="8,2"
                            Background="{DynamicResource WhiteForeground}"/>

                    <!-- Img visibility -->
                    <customButton:IconButton  Icon="{DynamicResource ImageIcon}"
                                            FillColor="{DynamicResource WhiteForeground}"
                                            Command="{Binding OpenCloseCoverCommand}">
                        <customButton:IconButton.Style>
                            <Style TargetType="customButton:IconButton"
                                   BasedOn="{StaticResource NowPlayingIconButton}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.IsCoverOpen, ElementName=RootView}"
                                                 Value="true">
                                        <Setter Property="BorderBrush" Value="{DynamicResource WhiteTransparent}"/>
                                        <Setter Property="Background" Value="{DynamicResource ScdWhiteTransparent}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </customButton:IconButton.Style>
                    </customButton:IconButton>

                    <Border Width="1"
                            Margin="8,2"
                            Background="{DynamicResource WhiteForeground}"/>

                    <customButton:IconButton Icon="{DynamicResource QueueIcon}"
                                            StrokeColor="{DynamicResource WhiteForeground}"
                                            FillColor="Transparent"
                                            StrokeWidth="2"
                                            Command="{Binding OpenCloseSubViewCommand}"
                                             CommandParameter="41">
                        <customButton:IconButton.Style>
                            <Style TargetType="customButton:IconButton"
                                   BasedOn="{StaticResource NowPlayingIconButton}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.IsQueueOpen, ElementName=RootView}"
                                                    Value="true">
                                        <Setter Property="BorderBrush" Value="{DynamicResource WhiteTransparent}"/>
                                        <Setter Property="Background" Value="{DynamicResource ScdWhiteTransparent}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </customButton:IconButton.Style>
                    </customButton:IconButton>

                    <customButton:IconButton Icon="{DynamicResource LyricsIcon}"
                                            FillColor="{DynamicResource WhiteForeground}"
                                           Command="{Binding OpenCloseSubViewCommand}"
                                             CommandParameter="42">
                        <customButton:IconButton.Style>
                            <Style TargetType="customButton:IconButton"
                                   BasedOn="{StaticResource NowPlayingIconButton}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.IsLyricsOpen, ElementName=RootView}"
                                                    Value="true">
                                        <Setter Property="BorderBrush" Value="{DynamicResource WhiteTransparent}"/>
                                        <Setter Property="Background" Value="{DynamicResource ScdWhiteTransparent}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </customButton:IconButton.Style>
                    </customButton:IconButton>

                    <customButton:IconButton Icon="{DynamicResource InfoIcon}"
                                            FillColor="{DynamicResource WhiteForeground}"
                                            Command="{Binding OpenCloseSubViewCommand}"
                                             CommandParameter="43">
                        <customButton:IconButton.Style>
                            <Style TargetType="customButton:IconButton"
                                   BasedOn="{StaticResource NowPlayingIconButton}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.IsTrackInfoOpen, ElementName=RootView}"
                                                    Value="true">
                                        <Setter Property="BorderBrush" Value="{DynamicResource WhiteTransparent}"/>
                                        <Setter Property="Background" Value="{DynamicResource ScdWhiteTransparent}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </customButton:IconButton.Style>
                    </customButton:IconButton>

                    <Border Width="1"
                            Margin="8,2"
                            Background="{DynamicResource WhiteForeground}"/>

                    <customButton:IconButton Icon="{DynamicResource Bigmaximize}"
                                             FillColor="{DynamicResource WhiteForeground}"
                                            Command="{Binding SwitchFullScreenCommand}">
                        <customButton:IconButton.Style>
                            <Style TargetType="customButton:IconButton"
                                   BasedOn="{StaticResource NowPlayingIconButton}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.NavigationService.IsFullScreen, ElementName=RootView}"
                                                    Value="true">
                                        <Setter Property="BorderBrush" Value="{DynamicResource WhiteTransparent}"/>
                                        <Setter Property="Background" Value="{DynamicResource ScdWhiteTransparent}"/>
                                    </DataTrigger>
                                </Style.Triggers>

                            </Style>
                        </customButton:IconButton.Style>
                    </customButton:IconButton>
                </StackPanel>
            </Grid>

            <!-- Main Content -->
            <Grid Grid.Row="1"
                  Grid.Column="1"
                  Panel.ZIndex="2"
                  x:Name="MainGrid"
                  HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/> <!-- width varies by binding a value (percentage of total width) to the width of the root control (grid) in this column -->
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Border Margin="10,0"
                        IsHitTestVisible="False"
                        Grid.Column="{Binding SpectrumColumn}">
                    <Border.Style>
                        <Style  TargetType="Border">
                            <Setter Property="Grid.ColumnSpan" Value="1"/>
                            <Style.Triggers>
                                <Trigger Property="Grid.Column" Value="0">
                                    <Setter Property="Grid.ColumnSpan" Value="2"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>
                    <spectrum:SpectrumVisualizer Stream="{Binding Stream}"
                                                 Visibility="{Binding SpectrumVisibility, Converter={StaticResource BoolToVisibilityConverter}}"
                                                 DataQuantity="{Binding VisualizerParameterService.DataQuantity, Mode=OneWay}"
                                                 SmoothGraph="{Binding VisualizerParameterService.SmoothGraph, Mode=OneWay}"
                                                 Fill="{Binding VisualizerParameterService.Fill, Mode=OneWay}"
                                                 StrokeThickness="{Binding VisualizerParameterService.StrokeThickness, Mode=OneWay}"
                                                 ObjectLength="{Binding VisualizerParameterService.ObjectLength, Mode=OneWay}"
                                                 RepresentationType="{Binding VisualizerParameterService.Representation, Mode=OneWay}"
                                                 CutHighFreq="{Binding VisualizerParameterService.CutHigherFreq, Mode=OneWay}"
                                                 CutPercentage="{Binding VisualizerParameterService.CutPercentage, Mode=OneWay,
                                                                Converter={StaticResource InvertPercentageConverter}}"
                                                 Gradient="{Binding VisualizerParameterService.Gradient, Mode=OneWay}"
                                                 CenterFreqRange="{Binding VisualizerParameterService.CenterFreq, Mode=OneWay}"
                                                 Opacity="1"
                                                 IsHitTestVisible="False"
                                                 HorizontalAlignment="Stretch"
                                                 VerticalAlignment="Stretch"
                                                 ObjectColor="{Binding VisualizerParameterService.ObjectColor, Mode=OneWay}"
                                                 FrameRate="{Binding VisualizerParameterService.RefreshRate, Mode=OneWay}"
                                                 Background="Transparent"
                                                 x:Name="spectrum">
                        <spectrum:SpectrumVisualizer.Style>
                            <Style TargetType="spectrum:SpectrumVisualizer">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.VisualizerParameterService.Representation, Mode=OneWay, ElementName=RootView}" Value="3">
                                        <Setter Property="Margin" Value="0,0,0,40"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding DataContext.VisualizerParameterService.Representation, Mode=OneWay, ElementName=RootView}" Value="13">
                                        <Setter Property="Margin" Value="0,0,0,40"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </spectrum:SpectrumVisualizer.Style>
                    </spectrum:SpectrumVisualizer>
                </Border>

                <Slider Visibility="Hidden"
                        Grid.ColumnSpan="2"
                        IsHitTestVisible="False"
                        Minimum="0"
                        Maximum="100"
                        Value="{Binding WidthValue, UpdateSourceTrigger=PropertyChanged}"
                        x:Name="ViewWidthSlider"/>

                <!-- Cover + player control -->
                <Grid VerticalAlignment="Center"
                      HorizontalAlignment="Center"
                      Margin="10,0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="auto"/>
                    </Grid.RowDefinitions>
                    <Grid.Width>
                        <MultiBinding Converter="{mathconv:MathConverter}" ConverterParameter="a/100 * b">
                            <Binding ElementName="ViewWidthSlider" Path="Value"/>
                            <Binding ElementName="RootBorder" Path="ActualWidth"/>
                        </MultiBinding>
                    </Grid.Width>

                    <Grid Name ="container"
                              Visibility="{Binding IsCoverOpen, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter=1}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center">
                        <Image Source="{Binding SelectedCover, Converter={StaticResource ONullImageConverter}, ConverterParameter=-1}" 
                               Margin="{Binding ActualWidth, ElementName=container, Converter={StaticResource SizeConverter}, ConverterParameter=20}"
                               VerticalAlignment="Stretch" 
                               HorizontalAlignment="Stretch"
                               Grid.ColumnSpan="2"
                               Visibility="Hidden"
                               x:Name="ImageCover">
                        </Image>
                        <Border CornerRadius="{DynamicResource SecondaryCornerRadius}"
                                VerticalAlignment="Stretch" 
                               HorizontalAlignment="Stretch"
                                 Width="{Binding ActualWidth, ElementName=ImageCover}"
                                 Height="{Binding ActualHeight, ElementName=ImageCover}"
                                x:Name="BorderImageCover">
                            <Border.Background>
                                <ImageBrush ImageSource="{Binding SelectedCover, Converter={StaticResource ONullImageConverter}, ConverterParameter=-1}"
                                             Stretch="UniformToFill"/>
                            </Border.Background>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="0.5*"/>
                                    <ColumnDefinition Width="0.5*"/>
                                </Grid.ColumnDefinitions>
                                <Border x:Name="previousCoverBorder"
                                        Background="Transparent">
                                    <customButton:IconButton x:Name="previousCoverBtn"
                                                            Icon="{StaticResource Back}"
                                                             Command="{Binding PreviousCoverCommand}"
                                                             FillColor="{StaticResource WhiteForeground}"
                                                        HorizontalAlignment="Center"
                                                          VerticalAlignment="Center"
                                                             HorizontalContentAlignment="Center"
                                                             VerticalContentAlignment="Center"
                                                             Margin="0"
                                                             IconMargin="0"
                                                             Padding="0"
                                                             Cursor="Hand"
                                                             CornerRadius="12, 0, 0, 12"
                                                          Width="{Binding ActualWidth, ElementName=ImageCover, Converter={StaticResource SizeConverter}, ConverterParameter=2.0}"
                                                          Height="{Binding ActualHeight, ElementName=ImageCover}"
                                                             IconHeight="{Binding Height, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SizeConverter}, ConverterParameter=4.0}"
                                                             IconWidth="{Binding Width, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SizeConverter}, ConverterParameter=4.0}"
                                                          IconStretch="Uniform"
                                                          Visibility="{Binding IsMouseOver, ElementName=previousCoverBorder, Converter={StaticResource BoolToVisibilityConverter}}"
                                                             MouseOverBackground="{DynamicResource BlackTransparent}">

                                    </customButton:IconButton>
                                </Border>

                                <Border Grid.Column="1"
                                        Background="Transparent"
                                        x:Name="nextCoverBorder">
                                    <customButton:IconButton x:Name="nextCoverBtn"
                                                             Command="{Binding NextCoverCommand}"
                                                            Icon="{StaticResource Forward}"
                                                             FillColor="{StaticResource WhiteForeground}"
                                                        HorizontalAlignment="Center"
                                                          VerticalAlignment="Center"
                                                             HorizontalContentAlignment="Center"
                                                             VerticalContentAlignment="Center"
                                                             Margin="0"
                                                             CornerRadius="0, 12, 12, 0"
                                                             IconMargin="0"
                                                             Padding="0"
                                                             Cursor="Hand"
                                                          Width="{Binding ActualWidth, ElementName=ImageCover, Converter={StaticResource SizeConverter}, ConverterParameter=2.0}"
                                                          Height="{Binding ActualHeight, ElementName=ImageCover}"
                                                             IconHeight="{Binding Height, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SizeConverter}, ConverterParameter=4.0}"
                                                             IconWidth="{Binding Width, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SizeConverter}, ConverterParameter=4.0}"
                                                          IconStretch="Uniform"
                                                          Visibility="{Binding IsMouseOver, ElementName=nextCoverBorder, Converter={StaticResource BoolToVisibilityConverter}}"
                                                             MouseOverBackground="{DynamicResource BlackTransparent}">

                                    </customButton:IconButton>
                                </Border>
                            
                            </Grid>
                        </Border>
                    </Grid>

                    <StackPanel Grid.Row="1" Margin="20, 0, 20, 20"
                                MinWidth="180"
                                VerticalAlignment="Top">
                        <player:NowPlayingPlayerControlView DataContext="{Binding PlayerViewModel}"
                                                            Visibility="{Binding DataContext.IsFullScreen, ElementName=RootView, Converter={StaticResource BoolToVisibilityConverter}}"/>

                        <TextBlock Text="{Binding QueueService.PlayingTrack.Title}"
                                   Grid.Row="1"
                                   Style="{DynamicResource SLStyle}"
                                   Foreground="{DynamicResource WhiteForeground}"
                                   FontSize="26"
                                   MaxHeight="110"
                                   VerticalAlignment="Top"
                                   HorizontalAlignment="Center"
                                   TextAlignment="Center">
                            <TextBlock.InputBindings>
                                <MouseBinding Gesture="LeftClick"
                                              Command="{Binding NavigateToAlbumCommand}"/>
                            </TextBlock.InputBindings>
                        </TextBlock>

                        <!-- Artists -->
                        <list:TrackArtistsListView Grid.Row="1"
                                                MaxHeight="50"
                                                   HorizontalAlignment="Center"
                                                   Opacity="0.8"
                                                   FontSize="18"
                                                   Foreground="{DynamicResource WhiteForeground}"
                                                   Command="{Binding NavigateToArtistCommand}"
                                               Artists="{Binding QueueService.PlayingTrack.Artists}"/>
                    </StackPanel>
                </Grid>


                <!-- SubViews -->
                <Border Grid.Column="1"
                    x:Name="SubViewBorder"
                        HorizontalAlignment="Stretch"
                        Panel.ZIndex="2"
                    Visibility="{Binding IsSubViewOpen, Converter={StaticResource BoolToVisibilityConverter}}">
                    <ContentControl Content="{Binding NavigationService.SecondaryViewModel}"
                                    MinWidth="300"
                                    Margin="0, 0, 10, 0"
                                HorizontalAlignment="Stretch">
                    </ContentControl>
                </Border>
            </Grid>
        </Grid>
    </Border>
</UserControl>
